use crate::cloud_provider::service::DatabaseType;
use crate::cloud_provider::Kind;
use crate::models::database::{DatabaseError, DatabaseInstanceType};
use std::fmt::{Display, Formatter};
use std::str::FromStr;
use strum_macros::EnumIter;

/// DO NOT MANUALLY EDIT THIS FILE. IT IS AUTO-GENERATED BY INSTANCES FETCHER APP
/// https://gitlab.com/qovery/backend/rust-backend/instances-fetcher/src/lib/rust_generator.rs
#[derive(Debug, Clone, PartialEq, Eq, EnumIter)]
#[allow(non_camel_case_types)]
pub enum AwsDatabaseInstanceType {
    DB_T3_MICRO,
    DB_T3_SMALL,
    DB_T3_MEDIUM,
    DB_T3_LARGE,
    CACHE_T3_MICRO,
    CACHE_T3_SMALL,
    CACHE_T3_MEDIUM,
    CACHE_T3_LARGE,
}

impl DatabaseInstanceType for AwsDatabaseInstanceType {
    fn cloud_provider(&self) -> Kind {
        Kind::Aws
    }

    fn to_cloud_provider_format(&self) -> String {
        match self {
            AwsDatabaseInstanceType::DB_T3_MICRO => "db.t3.micro",
            AwsDatabaseInstanceType::DB_T3_SMALL => "db.t3.small",
            AwsDatabaseInstanceType::DB_T3_MEDIUM => "db.t3.medium",
            AwsDatabaseInstanceType::DB_T3_LARGE => "db.t3.large",
            AwsDatabaseInstanceType::CACHE_T3_MICRO => "cache.t3.micro",
            AwsDatabaseInstanceType::CACHE_T3_SMALL => "cache.t3.small",
            AwsDatabaseInstanceType::CACHE_T3_MEDIUM => "cache.t3.medium",
            AwsDatabaseInstanceType::CACHE_T3_LARGE => "cache.t3.large",
        }
        .to_string()
    }

    fn is_instance_allowed(&self) -> bool {
        match self {
            AwsDatabaseInstanceType::DB_T3_MICRO => true,
            AwsDatabaseInstanceType::DB_T3_MEDIUM => true,
            AwsDatabaseInstanceType::DB_T3_SMALL => true,
            AwsDatabaseInstanceType::DB_T3_LARGE => true,
            AwsDatabaseInstanceType::CACHE_T3_MICRO => true,
            AwsDatabaseInstanceType::CACHE_T3_SMALL => true,
            AwsDatabaseInstanceType::CACHE_T3_MEDIUM => true,
            AwsDatabaseInstanceType::CACHE_T3_LARGE => true,
        }
    }

    fn is_instance_compatible_with(&self, database_type: DatabaseType) -> bool {
        match self {
            // DB
            AwsDatabaseInstanceType::DB_T3_MICRO
            | AwsDatabaseInstanceType::DB_T3_SMALL
            | AwsDatabaseInstanceType::DB_T3_MEDIUM
            | AwsDatabaseInstanceType::DB_T3_LARGE => match database_type {
                DatabaseType::PostgreSQL => true,
                DatabaseType::MongoDB => true,
                DatabaseType::MySQL => true,
                DatabaseType::Redis => false,
            },
            // CACHE
            AwsDatabaseInstanceType::CACHE_T3_MICRO
            | AwsDatabaseInstanceType::CACHE_T3_SMALL
            | AwsDatabaseInstanceType::CACHE_T3_MEDIUM
            | AwsDatabaseInstanceType::CACHE_T3_LARGE => match database_type {
                DatabaseType::PostgreSQL => false,
                DatabaseType::MongoDB => false,
                DatabaseType::MySQL => false,
                DatabaseType::Redis => true,
            },
        }
    }
}

impl Display for AwsDatabaseInstanceType {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.write_str(&self.to_cloud_provider_format())
    }
}

impl FromStr for AwsDatabaseInstanceType {
    type Err = DatabaseError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s.trim().to_lowercase().as_str() {
            "db.t3.micro" => Ok(AwsDatabaseInstanceType::DB_T3_MICRO),
            "db.t3.small" => Ok(AwsDatabaseInstanceType::DB_T3_SMALL),
            "db.t3.medium" => Ok(AwsDatabaseInstanceType::DB_T3_MEDIUM),
            "db.t3.large" => Ok(AwsDatabaseInstanceType::DB_T3_LARGE),
            "cache.t3.micro" => Ok(AwsDatabaseInstanceType::CACHE_T3_MICRO),
            "cache.t3.small" => Ok(AwsDatabaseInstanceType::CACHE_T3_SMALL),
            "cache.t3.medium" => Ok(AwsDatabaseInstanceType::CACHE_T3_MEDIUM),
            "cache.t3.large" => Ok(AwsDatabaseInstanceType::CACHE_T3_LARGE),
            _ => Err(DatabaseError::InvalidDatabaseInstance {
                database_cloud_provider: Kind::Aws,
                requested_database_instance_type: s.to_string(),
            }),
        }
    }
}

#[cfg(test)]
#[rustfmt::skip]
mod tests {
    use crate::cloud_provider::aws::database_instance_type::AwsDatabaseInstanceType;
    use crate::cloud_provider::service::DatabaseType;
    use crate::cloud_provider::Kind;
    use crate::models::database::DatabaseInstanceType;
    use std::str::FromStr;
    use strum::IntoEnumIterator;

    #[test]
    fn test_aws_database_instance_type_cloud_provider_kind() {
        for instance_type in AwsDatabaseInstanceType::iter() {
            // execute & verify:
            assert_eq!(Kind::Aws, instance_type.cloud_provider())
        }
    }

    #[test]
    fn test_aws_database_instance_type_to_cloud_provider_format() {
        for instance_type in AwsDatabaseInstanceType::iter() {
            // execute & verify:
            assert_eq!(
                match instance_type {
                    AwsDatabaseInstanceType::DB_T3_MICRO => "db.t3.micro",
                    AwsDatabaseInstanceType::DB_T3_SMALL => "db.t3.small",
                    AwsDatabaseInstanceType::DB_T3_MEDIUM => "db.t3.medium",
                    AwsDatabaseInstanceType::DB_T3_LARGE => "db.t3.large",
                    AwsDatabaseInstanceType::CACHE_T3_MICRO => "cache.t3.micro",
                    AwsDatabaseInstanceType::CACHE_T3_SMALL => "cache.t3.small",
                    AwsDatabaseInstanceType::CACHE_T3_MEDIUM => "cache.t3.medium",
                    AwsDatabaseInstanceType::CACHE_T3_LARGE => "cache.t3.large",
                }
                .to_string(),
                instance_type.to_cloud_provider_format()
            )
        }
    }

    #[test]
    fn test_aws_database_instance_type_to_string() {
        for instance_type in AwsDatabaseInstanceType::iter() {
            // execute & verify:
            assert_eq!(
                match instance_type {
                    AwsDatabaseInstanceType::DB_T3_MICRO => "db.t3.micro",
                    AwsDatabaseInstanceType::DB_T3_SMALL => "db.t3.small",
                    AwsDatabaseInstanceType::DB_T3_MEDIUM => "db.t3.medium",
                    AwsDatabaseInstanceType::DB_T3_LARGE => "db.t3.large",
                    AwsDatabaseInstanceType::CACHE_T3_MICRO => "cache.t3.micro",
                    AwsDatabaseInstanceType::CACHE_T3_SMALL => "cache.t3.small",
                    AwsDatabaseInstanceType::CACHE_T3_MEDIUM => "cache.t3.medium",
                    AwsDatabaseInstanceType::CACHE_T3_LARGE => "cache.t3.large",
                }
                .to_string(),
                instance_type.to_string()
            )
        }
    }

    #[test]
    fn test_aws_database_instance_type_from_str() {
        for instance_type in AwsDatabaseInstanceType::iter() {
            // execute & verify:
            // proper string: e.q `db.t3.micro`
            assert_eq!(
                Ok(instance_type.clone()),
                AwsDatabaseInstanceType::from_str(&instance_type.to_cloud_provider_format())
            );
            // string with several casing: e.q `DB.T3.MICRO`
            assert_eq!(
                Ok(instance_type.clone()),
                AwsDatabaseInstanceType::from_str(instance_type.to_cloud_provider_format().to_uppercase().as_str())
            );
            // string with leading and trailing spaces: e.q ` db.t3.micro   `
            assert_eq!(
                Ok(instance_type.clone()),
                AwsDatabaseInstanceType::from_str(
                    format!("  {}   ", &instance_type.to_cloud_provider_format()).as_str()
                )
            );
        }
    }

    #[test]
    fn test_aws_database_instance_type_is_instance_allowed() {
        for instance_type in AwsDatabaseInstanceType::iter() {
            // execute & verify:
            assert_eq!(
                match instance_type {
                    AwsDatabaseInstanceType::DB_T3_MICRO => true,
                    AwsDatabaseInstanceType::DB_T3_MEDIUM => true,
                    AwsDatabaseInstanceType::DB_T3_SMALL => true,
                    AwsDatabaseInstanceType::DB_T3_LARGE => true,
                    AwsDatabaseInstanceType::CACHE_T3_MICRO => true,
                    AwsDatabaseInstanceType::CACHE_T3_SMALL => true,
                    AwsDatabaseInstanceType::CACHE_T3_MEDIUM => true,
                    AwsDatabaseInstanceType::CACHE_T3_LARGE => true,
                },
                instance_type.is_instance_allowed(),
            )
        }
    }

    #[test]
    fn test_aws_database_instance_type_is_instance_compatible_with() {
        for db_type in DatabaseType::iter() {
            for instance_type in AwsDatabaseInstanceType::iter() {
                // execute & verify:
                assert_eq!(
                    match instance_type {
                        // DB
                        AwsDatabaseInstanceType::DB_T3_MICRO => match db_type {
                            DatabaseType::PostgreSQL => true,
                            DatabaseType::MongoDB => true,
                            DatabaseType::MySQL => true,
                            DatabaseType::Redis => false,
                        },
                        AwsDatabaseInstanceType::DB_T3_SMALL => match db_type {
                            DatabaseType::PostgreSQL => true,
                            DatabaseType::MongoDB => true,
                            DatabaseType::MySQL => true,
                            DatabaseType::Redis => false,
                        }
                        AwsDatabaseInstanceType::DB_T3_MEDIUM => match db_type {
                            DatabaseType::PostgreSQL => true,
                            DatabaseType::MongoDB => true,
                            DatabaseType::MySQL => true,
                            DatabaseType::Redis => false,
                        },
                        AwsDatabaseInstanceType::DB_T3_LARGE => match db_type {
                            DatabaseType::PostgreSQL => true,
                            DatabaseType::MongoDB => true,
                            DatabaseType::MySQL => true,
                            DatabaseType::Redis => false,
                        },
                        // CACHE
                        AwsDatabaseInstanceType::CACHE_T3_MICRO => match db_type {
                            DatabaseType::PostgreSQL => false,
                            DatabaseType::MongoDB => false,
                            DatabaseType::MySQL => false,
                            DatabaseType::Redis => true,
                        },
                        AwsDatabaseInstanceType::CACHE_T3_SMALL => match db_type {
                            DatabaseType::PostgreSQL => false,
                            DatabaseType::MongoDB => false,
                            DatabaseType::MySQL => false,
                            DatabaseType::Redis => true,
                        },
                        AwsDatabaseInstanceType::CACHE_T3_MEDIUM => match db_type {
                            DatabaseType::PostgreSQL => false,
                            DatabaseType::MongoDB => false,
                            DatabaseType::MySQL => false,
                            DatabaseType::Redis => true,
                        },
                        AwsDatabaseInstanceType::CACHE_T3_LARGE => match db_type {
                            DatabaseType::PostgreSQL => false,
                            DatabaseType::MongoDB => false,
                            DatabaseType::MySQL => false,
                            DatabaseType::Redis => true,
                        },
                    },
                    instance_type.is_instance_compatible_with(db_type),
                )
            }
        }
    }
}
