use crate::environment::models::database::{DatabaseError, DatabaseInstanceType};
use crate::infrastructure::models::cloud_provider::service::DatabaseType;
use crate::infrastructure::models::cloud_provider::Kind;
use std::fmt::{Display, Formatter};
use std::str::FromStr;
use strum_macros::EnumIter;

/// DO NOT MANUALLY EDIT THIS FILE. IT IS AUTO-GENERATED BY INSTANCES FETCHER APP
/// https://gitlab.com/qovery/backend/rust-backend/instances-fetcher/src/lib/rust_generator.rs
#[derive(Debug, Clone, PartialEq, Eq, EnumIter)]
#[allow(non_camel_case_types)]
pub enum ScwDatabaseInstanceType {
    RED1_2XS,
    RED1_L,
    RED1_M,
    RED1_S,
    RED1_XL,
    RED1_XS,
    RED1_MICRO,
    DB_DEV_L,
    DB_DEV_M,
    DB_DEV_S,
    DB_DEV_XL,
    DB_GP_L,
    DB_GP_M,
    DB_GP_S,
    DB_GP_XS,
    DB_PLAY2_NANO,
    DB_PLAY2_PICO,
    DB_POP2_16C_64G,
    DB_POP2_2C_8G,
    DB_POP2_32C_128G,
    DB_POP2_4C_16G,
    DB_POP2_8C_32G,
    DB_PRO2_L,
    DB_PRO2_M,
    DB_PRO2_S,
    DB_PRO2_XS,
    DB_PRO2_XXS,
}

impl DatabaseInstanceType for ScwDatabaseInstanceType {
    fn cloud_provider(&self) -> Kind {
        Kind::Scw
    }

    fn to_cloud_provider_format(&self) -> String {
        match self {
            ScwDatabaseInstanceType::RED1_2XS => "RED1-2XS",
            ScwDatabaseInstanceType::RED1_L => "RED1-L",
            ScwDatabaseInstanceType::RED1_M => "RED1-M",
            ScwDatabaseInstanceType::RED1_S => "RED1-S",
            ScwDatabaseInstanceType::RED1_XL => "RED1-XL",
            ScwDatabaseInstanceType::RED1_XS => "RED1-XS",
            ScwDatabaseInstanceType::RED1_MICRO => "RED1-micro",
            ScwDatabaseInstanceType::DB_DEV_L => "db-dev-l",
            ScwDatabaseInstanceType::DB_DEV_M => "db-dev-m",
            ScwDatabaseInstanceType::DB_DEV_S => "db-dev-s",
            ScwDatabaseInstanceType::DB_DEV_XL => "db-dev-xl",
            ScwDatabaseInstanceType::DB_GP_L => "db-gp-l",
            ScwDatabaseInstanceType::DB_GP_M => "db-gp-m",
            ScwDatabaseInstanceType::DB_GP_S => "db-gp-s",
            ScwDatabaseInstanceType::DB_GP_XS => "db-gp-xs",
            ScwDatabaseInstanceType::DB_PLAY2_NANO => "db-play2-nano",
            ScwDatabaseInstanceType::DB_PLAY2_PICO => "db-play2-pico",
            ScwDatabaseInstanceType::DB_POP2_16C_64G => "db-pop2-16c-64g",
            ScwDatabaseInstanceType::DB_POP2_2C_8G => "db-pop2-2c-8g",
            ScwDatabaseInstanceType::DB_POP2_32C_128G => "db-pop2-32c-128g",
            ScwDatabaseInstanceType::DB_POP2_4C_16G => "db-pop2-4c-16g",
            ScwDatabaseInstanceType::DB_POP2_8C_32G => "db-pop2-8c-32g",
            ScwDatabaseInstanceType::DB_PRO2_L => "db-pro2-l",
            ScwDatabaseInstanceType::DB_PRO2_M => "db-pro2-m",
            ScwDatabaseInstanceType::DB_PRO2_S => "db-pro2-s",
            ScwDatabaseInstanceType::DB_PRO2_XS => "db-pro2-xs",
            ScwDatabaseInstanceType::DB_PRO2_XXS => "db-pro2-xxs",
        }
        .to_string()
    }

    fn is_instance_allowed(&self) -> bool {
        match self {
            ScwDatabaseInstanceType::RED1_2XS => true,
            ScwDatabaseInstanceType::RED1_L => true,
            ScwDatabaseInstanceType::RED1_M => true,
            ScwDatabaseInstanceType::RED1_S => true,
            ScwDatabaseInstanceType::RED1_XL => true,
            ScwDatabaseInstanceType::RED1_XS => true,
            ScwDatabaseInstanceType::RED1_MICRO => true,
            ScwDatabaseInstanceType::DB_DEV_L => true,
            ScwDatabaseInstanceType::DB_DEV_M => true,
            ScwDatabaseInstanceType::DB_DEV_S => true,
            ScwDatabaseInstanceType::DB_DEV_XL => true,
            ScwDatabaseInstanceType::DB_GP_L => true,
            ScwDatabaseInstanceType::DB_GP_M => true,
            ScwDatabaseInstanceType::DB_GP_S => true,
            ScwDatabaseInstanceType::DB_GP_XS => true,
            ScwDatabaseInstanceType::DB_PLAY2_NANO => true,
            ScwDatabaseInstanceType::DB_PLAY2_PICO => true,
            ScwDatabaseInstanceType::DB_POP2_16C_64G => true,
            ScwDatabaseInstanceType::DB_POP2_2C_8G => true,
            ScwDatabaseInstanceType::DB_POP2_32C_128G => true,
            ScwDatabaseInstanceType::DB_POP2_4C_16G => true,
            ScwDatabaseInstanceType::DB_POP2_8C_32G => true,
            ScwDatabaseInstanceType::DB_PRO2_L => true,
            ScwDatabaseInstanceType::DB_PRO2_M => true,
            ScwDatabaseInstanceType::DB_PRO2_S => true,
            ScwDatabaseInstanceType::DB_PRO2_XS => true,
            ScwDatabaseInstanceType::DB_PRO2_XXS => true,
        }
    }

    fn is_instance_compatible_with(&self, database_type: DatabaseType) -> bool {
        matches!((self, database_type), |(
            ScwDatabaseInstanceType::RED1_2XS,
            DatabaseType::Redis,
        )| (
            ScwDatabaseInstanceType::RED1_L,
            DatabaseType::Redis
        ) | (
            ScwDatabaseInstanceType::RED1_M,
            DatabaseType::Redis
        ) | (
            ScwDatabaseInstanceType::RED1_S,
            DatabaseType::Redis
        ) | (
            ScwDatabaseInstanceType::RED1_XL,
            DatabaseType::Redis
        ) | (
            ScwDatabaseInstanceType::RED1_XS,
            DatabaseType::Redis
        ) | (
            ScwDatabaseInstanceType::RED1_MICRO,
            DatabaseType::Redis
        ) | (
            ScwDatabaseInstanceType::DB_DEV_L,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_DEV_L,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_DEV_M,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_DEV_M,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_DEV_S,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_DEV_S,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_DEV_XL,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_DEV_XL,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_GP_L,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_GP_L,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_GP_M,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_GP_M,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_GP_S,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_GP_S,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_GP_XS,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_GP_XS,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_PLAY2_NANO,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_PLAY2_NANO,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_PLAY2_PICO,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_PLAY2_PICO,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_POP2_16C_64G,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_POP2_16C_64G,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_POP2_2C_8G,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_POP2_2C_8G,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_POP2_32C_128G,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_POP2_32C_128G,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_POP2_4C_16G,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_POP2_4C_16G,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_POP2_8C_32G,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_POP2_8C_32G,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_PRO2_L,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_PRO2_L,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_PRO2_M,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_PRO2_M,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_PRO2_S,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_PRO2_S,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_PRO2_XS,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_PRO2_XS,
            DatabaseType::PostgreSQL
        ) | (
            ScwDatabaseInstanceType::DB_PRO2_XXS,
            DatabaseType::MySQL
        ) | (
            ScwDatabaseInstanceType::DB_PRO2_XXS,
            DatabaseType::PostgreSQL
        ))
    }
}

impl Display for ScwDatabaseInstanceType {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.write_str(&self.to_cloud_provider_format())
    }
}

impl FromStr for ScwDatabaseInstanceType {
    type Err = DatabaseError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s.trim().to_lowercase().as_str() {
            "red1-2xs" => Ok(ScwDatabaseInstanceType::RED1_2XS),
            "red1-l" => Ok(ScwDatabaseInstanceType::RED1_L),
            "red1-m" => Ok(ScwDatabaseInstanceType::RED1_M),
            "red1-s" => Ok(ScwDatabaseInstanceType::RED1_S),
            "red1-xl" => Ok(ScwDatabaseInstanceType::RED1_XL),
            "red1-xs" => Ok(ScwDatabaseInstanceType::RED1_XS),
            "red1-micro" => Ok(ScwDatabaseInstanceType::RED1_MICRO),
            "db-dev-l" => Ok(ScwDatabaseInstanceType::DB_DEV_L),
            "db-dev-m" => Ok(ScwDatabaseInstanceType::DB_DEV_M),
            "db-dev-s" => Ok(ScwDatabaseInstanceType::DB_DEV_S),
            "db-dev-xl" => Ok(ScwDatabaseInstanceType::DB_DEV_XL),
            "db-gp-l" => Ok(ScwDatabaseInstanceType::DB_GP_L),
            "db-gp-m" => Ok(ScwDatabaseInstanceType::DB_GP_M),
            "db-gp-s" => Ok(ScwDatabaseInstanceType::DB_GP_S),
            "db-gp-xs" => Ok(ScwDatabaseInstanceType::DB_GP_XS),
            "db-play2-nano" => Ok(ScwDatabaseInstanceType::DB_PLAY2_NANO),
            "db-play2-pico" => Ok(ScwDatabaseInstanceType::DB_PLAY2_PICO),
            "db-pop2-16c-64g" => Ok(ScwDatabaseInstanceType::DB_POP2_16C_64G),
            "db-pop2-2c-8g" => Ok(ScwDatabaseInstanceType::DB_POP2_2C_8G),
            "db-pop2-32c-128g" => Ok(ScwDatabaseInstanceType::DB_POP2_32C_128G),
            "db-pop2-4c-16g" => Ok(ScwDatabaseInstanceType::DB_POP2_4C_16G),
            "db-pop2-8c-32g" => Ok(ScwDatabaseInstanceType::DB_POP2_8C_32G),
            "db-pro2-l" => Ok(ScwDatabaseInstanceType::DB_PRO2_L),
            "db-pro2-m" => Ok(ScwDatabaseInstanceType::DB_PRO2_M),
            "db-pro2-s" => Ok(ScwDatabaseInstanceType::DB_PRO2_S),
            "db-pro2-xs" => Ok(ScwDatabaseInstanceType::DB_PRO2_XS),
            "db-pro2-xxs" => Ok(ScwDatabaseInstanceType::DB_PRO2_XXS),
            _ => Err(DatabaseError::InvalidDatabaseInstance {
                database_cloud_provider: Kind::Scw,
                requested_database_instance_type: s.to_string(),
            }),
        }
    }
}

#[cfg(test)]
#[rustfmt::skip]
mod tests {
    use crate::infrastructure::models::cloud_provider::scaleway::database_instance_type::ScwDatabaseInstanceType;
    use crate::infrastructure::models::cloud_provider::Kind;
    use crate::environment::models::database::DatabaseInstanceType;
    use std::str::FromStr;
    use strum::IntoEnumIterator;
    use crate::infrastructure::models::cloud_provider::service::DatabaseType;

    #[test]
    fn test_scaleway_database_instance_type_cloud_provider_kind() {
        for instance_type in ScwDatabaseInstanceType::iter() {
            // execute & verify:
            assert_eq!(Kind::Scw, instance_type.cloud_provider())
        }
    }

    #[test]
    fn test_scaleway_database_instance_type_to_cloud_provider_format() {
        for instance_type in ScwDatabaseInstanceType::iter() {
            // execute & verify:
            assert_eq!(
                match instance_type {
                    ScwDatabaseInstanceType::RED1_2XS => "RED1-2XS",
                    ScwDatabaseInstanceType::RED1_L => "RED1-L",
                    ScwDatabaseInstanceType::RED1_M => "RED1-M",
                    ScwDatabaseInstanceType::RED1_S => "RED1-S",
                    ScwDatabaseInstanceType::RED1_XL => "RED1-XL",
                    ScwDatabaseInstanceType::RED1_XS => "RED1-XS",
                    ScwDatabaseInstanceType::RED1_MICRO => "RED1-micro",
                    ScwDatabaseInstanceType::DB_DEV_L => "db-dev-l",
                    ScwDatabaseInstanceType::DB_DEV_M => "db-dev-m",
                    ScwDatabaseInstanceType::DB_DEV_S => "db-dev-s",
                    ScwDatabaseInstanceType::DB_DEV_XL => "db-dev-xl",
                    ScwDatabaseInstanceType::DB_GP_L => "db-gp-l",
                    ScwDatabaseInstanceType::DB_GP_M => "db-gp-m",
                    ScwDatabaseInstanceType::DB_GP_S => "db-gp-s",
                    ScwDatabaseInstanceType::DB_GP_XS => "db-gp-xs",
                    ScwDatabaseInstanceType::DB_PLAY2_NANO => "db-play2-nano",
                    ScwDatabaseInstanceType::DB_PLAY2_PICO => "db-play2-pico",
                    ScwDatabaseInstanceType::DB_POP2_16C_64G => "db-pop2-16c-64g",
                    ScwDatabaseInstanceType::DB_POP2_2C_8G => "db-pop2-2c-8g",
                    ScwDatabaseInstanceType::DB_POP2_32C_128G => "db-pop2-32c-128g",
                    ScwDatabaseInstanceType::DB_POP2_4C_16G => "db-pop2-4c-16g",
                    ScwDatabaseInstanceType::DB_POP2_8C_32G => "db-pop2-8c-32g",
                    ScwDatabaseInstanceType::DB_PRO2_L => "db-pro2-l",
                    ScwDatabaseInstanceType::DB_PRO2_M => "db-pro2-m",
                    ScwDatabaseInstanceType::DB_PRO2_S => "db-pro2-s",
                    ScwDatabaseInstanceType::DB_PRO2_XS => "db-pro2-xs",
                    ScwDatabaseInstanceType::DB_PRO2_XXS => "db-pro2-xxs",
                }
                    .to_string(),
                instance_type.to_cloud_provider_format()
            )
        }
    }

    #[test]
    fn test_scaleway_database_instance_type_to_string() {
        for instance_type in ScwDatabaseInstanceType::iter() {
            // execute & verify:
            assert_eq!(
                match instance_type {
                    ScwDatabaseInstanceType::RED1_2XS => "RED1-2XS",
                    ScwDatabaseInstanceType::RED1_L => "RED1-L",
                    ScwDatabaseInstanceType::RED1_M => "RED1-M",
                    ScwDatabaseInstanceType::RED1_S => "RED1-S",
                    ScwDatabaseInstanceType::RED1_XL => "RED1-XL",
                    ScwDatabaseInstanceType::RED1_XS => "RED1-XS",
                    ScwDatabaseInstanceType::RED1_MICRO => "RED1-micro",
                    ScwDatabaseInstanceType::DB_DEV_L => "db-dev-l",
                    ScwDatabaseInstanceType::DB_DEV_M => "db-dev-m",
                    ScwDatabaseInstanceType::DB_DEV_S => "db-dev-s",
                    ScwDatabaseInstanceType::DB_DEV_XL => "db-dev-xl",
                    ScwDatabaseInstanceType::DB_GP_L => "db-gp-l",
                    ScwDatabaseInstanceType::DB_GP_M => "db-gp-m",
                    ScwDatabaseInstanceType::DB_GP_S => "db-gp-s",
                    ScwDatabaseInstanceType::DB_GP_XS => "db-gp-xs",
                    ScwDatabaseInstanceType::DB_PLAY2_NANO => "db-play2-nano",
                    ScwDatabaseInstanceType::DB_PLAY2_PICO => "db-play2-pico",
                    ScwDatabaseInstanceType::DB_POP2_16C_64G => "db-pop2-16c-64g",
                    ScwDatabaseInstanceType::DB_POP2_2C_8G => "db-pop2-2c-8g",
                    ScwDatabaseInstanceType::DB_POP2_32C_128G => "db-pop2-32c-128g",
                    ScwDatabaseInstanceType::DB_POP2_4C_16G => "db-pop2-4c-16g",
                    ScwDatabaseInstanceType::DB_POP2_8C_32G => "db-pop2-8c-32g",
                    ScwDatabaseInstanceType::DB_PRO2_L => "db-pro2-l",
                    ScwDatabaseInstanceType::DB_PRO2_M => "db-pro2-m",
                    ScwDatabaseInstanceType::DB_PRO2_S => "db-pro2-s",
                    ScwDatabaseInstanceType::DB_PRO2_XS => "db-pro2-xs",
                    ScwDatabaseInstanceType::DB_PRO2_XXS => "db-pro2-xxs",
                }
                    .to_string(),
                instance_type.to_string()
            )
        }
    }

    #[test]
    fn test_scaleway_database_instance_type_from_str() {
        for instance_type in ScwDatabaseInstanceType::iter() {
            // execute & verify:
            // proper string: e.q `db-dev-s`
            assert_eq!(
                Ok(instance_type.clone()),
                ScwDatabaseInstanceType::from_str(&instance_type.to_cloud_provider_format())
            );
            // string with several casing: e.q `DB-DEV-S`
            assert_eq!(
                Ok(instance_type.clone()),
                ScwDatabaseInstanceType::from_str(instance_type.to_cloud_provider_format().to_uppercase().as_str())
            );
            // string with leading and trailing spaces: e.q ` db-dev-s   `
            assert_eq!(
                Ok(instance_type.clone()),
                ScwDatabaseInstanceType::from_str(
                    format!("  {}   ", &instance_type.to_cloud_provider_format()).as_str()
                )
            );
        }
    }

    #[test]
    fn test_scaleway_database_instance_type_is_instance_allowed() {
        for instance_type in ScwDatabaseInstanceType::iter() {
            // execute & verify:
            assert_eq!(
                match instance_type {
                    ScwDatabaseInstanceType::RED1_2XS => true,
                    ScwDatabaseInstanceType::RED1_L => true,
                    ScwDatabaseInstanceType::RED1_M => true,
                    ScwDatabaseInstanceType::RED1_S => true,
                    ScwDatabaseInstanceType::RED1_XL => true,
                    ScwDatabaseInstanceType::RED1_XS => true,
                    ScwDatabaseInstanceType::RED1_MICRO => true,
                    ScwDatabaseInstanceType::DB_DEV_L => true,
                    ScwDatabaseInstanceType::DB_DEV_M => true,
                    ScwDatabaseInstanceType::DB_DEV_S => true,
                    ScwDatabaseInstanceType::DB_DEV_XL => true,
                    ScwDatabaseInstanceType::DB_GP_L => true,
                    ScwDatabaseInstanceType::DB_GP_M => true,
                    ScwDatabaseInstanceType::DB_GP_S => true,
                    ScwDatabaseInstanceType::DB_GP_XS => true,
                    ScwDatabaseInstanceType::DB_PLAY2_NANO => true,
                    ScwDatabaseInstanceType::DB_PLAY2_PICO => true,
                    ScwDatabaseInstanceType::DB_POP2_16C_64G => true,
                    ScwDatabaseInstanceType::DB_POP2_2C_8G => true,
                    ScwDatabaseInstanceType::DB_POP2_32C_128G => true,
                    ScwDatabaseInstanceType::DB_POP2_4C_16G => true,
                    ScwDatabaseInstanceType::DB_POP2_8C_32G => true,
                    ScwDatabaseInstanceType::DB_PRO2_L => true,
                    ScwDatabaseInstanceType::DB_PRO2_M => true,
                    ScwDatabaseInstanceType::DB_PRO2_S => true,
                    ScwDatabaseInstanceType::DB_PRO2_XS => true,
                    ScwDatabaseInstanceType::DB_PRO2_XXS => true,
                },
                instance_type.is_instance_allowed(),
            )
        }
    }

    #[test]
    fn test_scaleway_database_instance_type_is_instance_compatible_with() {
        for db_type in DatabaseType::iter() {
            for instance_type in ScwDatabaseInstanceType::iter() {
                // execute & verify:
                assert_eq!(
                    matches!(
                        (instance_type.clone(), db_type),
                        | (ScwDatabaseInstanceType::RED1_2XS, DatabaseType::Redis)
                        | (ScwDatabaseInstanceType::RED1_L, DatabaseType::Redis)
                        | (ScwDatabaseInstanceType::RED1_M, DatabaseType::Redis)
                        | (ScwDatabaseInstanceType::RED1_S, DatabaseType::Redis)
                        | (ScwDatabaseInstanceType::RED1_XL, DatabaseType::Redis)
                        | (ScwDatabaseInstanceType::RED1_XS, DatabaseType::Redis)
                        | (ScwDatabaseInstanceType::RED1_MICRO, DatabaseType::Redis)
                        | (ScwDatabaseInstanceType::DB_DEV_L, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_DEV_L, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_DEV_M, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_DEV_M, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_DEV_S, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_DEV_S, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_DEV_XL, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_DEV_XL, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_GP_L, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_GP_L, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_GP_M, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_GP_M, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_GP_S, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_GP_S, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_GP_XS, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_GP_XS, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_PLAY2_NANO, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_PLAY2_NANO, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_PLAY2_PICO, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_PLAY2_PICO, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_POP2_16C_64G, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_POP2_16C_64G, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_POP2_2C_8G, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_POP2_2C_8G, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_POP2_32C_128G, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_POP2_32C_128G, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_POP2_4C_16G, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_POP2_4C_16G, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_POP2_8C_32G, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_POP2_8C_32G, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_PRO2_L, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_PRO2_L, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_PRO2_M, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_PRO2_M, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_PRO2_S, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_PRO2_S, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_PRO2_XS, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_PRO2_XS, DatabaseType::PostgreSQL)
                        | (ScwDatabaseInstanceType::DB_PRO2_XXS, DatabaseType::MySQL)
                        | (ScwDatabaseInstanceType::DB_PRO2_XXS, DatabaseType::PostgreSQL)
                    ),
                    instance_type.is_instance_compatible_with(db_type),
                )
            }
        }
    }
}
