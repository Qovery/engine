[package]
name = "qovery-engine"
version = "0.1.0"
authors = ["Romaric Philogene <romaric@qovery.com>"]
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
atomic_enum = "0.3.0"
bitflags = "2.6.0"
chrono = "0.4.38"
derivative = "2.2.0"
git2 = "0.19.0"
walkdir = "2.5.0"
itertools = "0.13.0"
base64 = "0.22.1"
dirs = "5.0.1"
retry = "2.0.0"
trust-dns-resolver = "0.23.2"
rand = "0.8.5"
semver = "1.0.23"
gethostname = "0.5.0"
reqwest = { version = "0.12.5", features = ["blocking", "json"] }
futures = "0.3.30"
timeout-readwrite = "0.3.3"
uuid = { version = "1.10.0", features = ["v4", "serde"] }
url = { version = "2.5.2", features = ["serde"] }
function_name = "0.3.0"
thiserror = "1.0.62"
strum = "0.26.3"
strum_macros = "0.26.4"
urlencoding = "2.1.3"
regex = "1.10.5"
async-trait = "0.1.81"
scopeguard = "1.2.0"
libc = "0.2.155"
anyhow = "1.0.86"
tempfile = "3"
governor = "0.6.3"
once_cell = "1.19.0"
nonzero_ext = "0.3.0"
json-patch = "2.0.0"
jsonptr = "0.4.7"
enum_dispatch = "0.3.13"
time = { version = "0.3.36", features = ["formatting", "parsing"] }
derive_more = { version = "1.0.0-beta.6", features = ["display"] }

kube = { version = "0.93.1", features = ["default", "runtime", "derive", "ws"] }
k8s-openapi = { version = "0.22.0", default-features = false, features = [
    "v1_27",
] }

# FIXME use https://crates.io/crates/blocking instead of runtime.rs

# tar gz
flate2 = "1.0.30"
tar = "0.4.41"

# logger
tracing = "0.1.40"
tracing-subscriber = { version = "0.3.18", features = ["json"] }

# Docker deps
# shiplift = "0.6.0"

# Network
ipnet = "2.9.0"

# Jinja2
tera = "1.20.0"

# Json
serde = "1.0.204"
serde_json = "1.0.120"
serde_derive = "1.0.204"
serde_yaml = "0.9.34"
schemars = "0.8.21"

# Secrets manager
vaultrs = "0.7.2"
vaultrs-login = "0.2.1"

# AWS deps
tokio = { version = "1.38.1", features = ["full"] }
rusoto_core = "0.48.0"
rusoto_sts = "0.48.0"
rusoto_credential = "0.48.0"
rusoto_ecr = "0.48.0"
rusoto_eks = "0.48.0"
rusoto_s3 = "0.48.0"
rusoto_signature = "0.48.0"
aws-config = "1.5.4"
aws-sdk-elasticloadbalancingv2 = "1.37.0"
aws-sdk-eks = "1.40.0"
aws-sdk-rds = "1.45.0"
aws-sdk-elasticache = "1.38.0"
aws-sdk-docdb = "1.38.0"
aws-sdk-ec2 = "1.59.0"
aws-types = "1.3.3"
aws-sdk-iam = "1.36.0"
aws-smithy-client = "0.60.3"
aws-smithy-async = { version = "1.2.1", features = ["rt-tokio"] }
aws-credential-types = "1.2.0"

# Scaleway Deps
scaleway_api_rs = "=0.1.2"

# GCP deps
google-cloud-auth = "0.17.0"
google-cloud-storage = "0.22.0"
google-cloud-artifact-registry = "0.7.0"
google-cloud-googleapis = "0.15.0"

# GRPC
tonic = "0.12.0"

[dev-dependencies]
bstr = "1.9.1"
tempdir = "0.3.7"
tempfile = "3.10.1"
maplit = "1.0.2"
tracing-test = "0.2.5"
passwords = "3.1.16"
const_format = "0.2.32"
hashicorp_vault = "2.1.1"
curl = "0.4.46"
dotenv = "0.15.0"
faux = "0.1.10"
testcontainers = { version = "0.22.0", features = ["blocking"] }


[features]
default = []
# Check that env logger is in a correct state when emitting logs
env-logger-check = []
test-all = [
    "test-all-minimal",
    "test-all-self-hosted",
    "test-all-infra",
    "test-all-managed-services",
    "test-all-whole-enchilada",
]

# Minimal depencies test (i.e: build, deploy nothing managed)
test-aws-minimal = ["env-logger-check"]
test-aws-ec2-minimal = ["env-logger-check"]
test-scw-minimal = ["env-logger-check"]
test-gcp-minimal = ["env-logger-check"]
test-all-minimal = [
    "test-aws-minimal",
    "test-aws-ec2-minimal",
    "test-scw-minimal",
    "test-gcp-minimal",
]

# functionnal tests by type
test-aws-self-hosted = ["env-logger-check"]
test-aws-ec2-self-hosted = ["env-logger-check"]
test-scw-self-hosted = ["env-logger-check"]
test-gcp-self-hosted = ["env-logger-check"]
test-all-self-hosted = [
    "test-aws-self-hosted",
    "test-aws-ec2-self-hosted",
    "test-scw-self-hosted",
    "test-gcp-self-hosted",
]

test-aws-managed-services = ["env-logger-check"]
test-aws-ec2-managed-services = ["env-logger-check"]
test-scw-managed-services = ["env-logger-check"]
test-gcp-managed-services = ["env-logger-check"]
test-all-managed-services = [
    "test-aws-managed-services",
    "test-aws-ec2-managed-services",
    "test-scw-managed-services",
    "test-gcp-managed-services",
]

test-aws-infra = []
test-aws-ec2-infra = []
test-scw-infra = []
test-gcp-infra = []
test-all-infra = [
    "test-aws-infra",
    "test-aws-ec2-infra",
    "test-scw-infra",
    "test-gcp-infra",
]

test-aws-whole-enchilada = []
test-aws-ec2-whole-enchilada = []
test-scw-whole-enchilada = []
test-gcp-whole-enchilada = []
test-all-whole-enchilada = [
    "test-aws-whole-enchilada",
    "test-aws-ec2-whole-enchilada",
    "test-scw-whole-enchilada",
    "test-gcp-whole-enchilada",
]

# functionnal tests by provider
test-aws-all = [
    "test-aws-infra",
    "test-aws-managed-services",
    "test-aws-self-hosted",
    "test-aws-whole-enchilada",
]
test-aws-ec2-all = [
    "test-aws-ec2-infra",
    "test-aws-ec2-managed-services",
    "test-aws-ec2-self-hosted",
    "test-aws-ec2-whole-enchilada",
]
test-scw-all = [
    "test-scw-infra",
    "test-scw-managed-services",
    "test-scw-self-hosted",
    "test-scw-whole-enchilada",
]
test-gcp-all = [
    "test-gcp-infra",
    "test-gcp-managed-services",
    "test-gcp-self-hosted",
    "test-gcp-whole-enchilada",
]

test-quarantine = []

# functionnal test with only a k8s cluster as a dependency
test-local-kube = []
test-local-docker = []
test-all-local = ["test-local-kube", "test-local-docker"]
