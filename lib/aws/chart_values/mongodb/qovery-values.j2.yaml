
nameOverride: "{{ sanitized_name }}"
fullnameOverride: "{{ sanitized_name }}"
commonLabels:
  envId: "{{ environment_id }}"
  databaseId: "{{ id }}"
  databaseLongId: "{{ long_id }}"
  envLongId: "{{ environment_long_id }}"
  projectLongId: "{{ project_long_id }}"
  qovery.com/service-id: "{{ long_id }}"
  qovery.com/service-type: "database"
  qovery.com/environment-id: "{{ environment_long_id }}"
  qovery.com/project-id: "{{ project_long_id }}"

image:
  registry: {{ registry_name}}
  repository: {{ repository_name}}
  tag: "{{ version }}"

useStatefulSet: true

auth:
  rootPassword: "{{ database_password }}"
  username: "{{ database_login }}"
  password: "{{ database_password }}"
  database: "{{ database_db_name }}"

resources:
  requests:
    memory: "{{ database_ram_size_in_mib }}Mi"
    cpu: "{{ database_total_cpus }}"
  limits:
    memory: "{{ database_ram_size_in_mib }}Mi"
    cpu: "{{ database_total_cpus }}"

# on version > 6 need to use custom liveness/readniess probes to avoid over-using resources usage
# otherwise customize the default probes timers, because with minimal resources it taskes time to start
# https://github.com/bitnami/charts/issues/10264
{% set version_number = version | int -%}
{% if version_number >= 6 -%}
customLivenessProbe:
  exec:
    command:
      - mongo
      - --eval
      - "db.adminCommand('ping')"
  initialDelaySeconds: 30
  periodSeconds: 20
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 6
customReadinessProbe:
  exec:
    command:
      - mongo
      - --eval
      - "db.adminCommand('ping')"
  initialDelaySeconds: 30
  periodSeconds: 20
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 6
{% else -%}
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 20
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 20
  failureThreshold: 6
  successThreshold: 1
{% endif %}

service:
  nameOverride: {{ service_name }}
  ports:
    mongodb: "{{ database_port }}"
  type: {% if publicly_accessible -%}LoadBalancer{% else -%}ClusterIP{% endif %}
  {% if publicly_accessible -%}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    external-dns.alpha.kubernetes.io/hostname: "{{ fqdn }}"
    external-dns.alpha.kubernetes.io/ttl: "300"
  {% endif %}

persistence:
  storageClass: "aws-ebs-gp2-0"
  size: "{{ database_disk_size_in_gib }}Gi"
  labels:
    # app label required for legacy chart (installed before 01/06/23)
    app: "{{ sanitized_name }}" 
    envId: "{{ environment_id }}"
    databaseId: "{{ id }}"
    databaseLongId: "{{ long_id }}"
    envLongId: "{{ environment_long_id }}"
    projectLongId: "{{ project_long_id }}"
    qovery.com/service-id: "{{ long_id }}"
    qovery.com/service-type: "database"
    qovery.com/environment-id: "{{ environment_long_id }}"
    qovery.com/project-id: "{{ project_long_id }}"
  annotations:
    envId: "{{ environment_id }}"
    databaseId: "{{ id }}"
    databaseLongId: "{{ long_id }}"
    envLongId: "{{ environment_long_id }}"
    projectLongId: "{{ project_long_id }}"
    qovery.com/service-id: "{{ long_id }}"
    qovery.com/service-type: "database"
    qovery.com/environment-id: "{{ environment_long_id }}"
    qovery.com/project-id: "{{ project_long_id }}"

serviceAccount:
  create: true
  name: "{{ sanitized_name }}"

rbac:
  create: true

volumePermissions:
  image:
    registry: {{ registry_name }}
    repository: {{ repository_name_minideb }}