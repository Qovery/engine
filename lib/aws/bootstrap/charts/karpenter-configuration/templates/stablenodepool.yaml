apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: stable
spec:
  template:
    spec:
      requirements:
        {{- range .Values.global_node_pools.requirements }}
        - key: "{{ .key }}"
          operator: "{{ .operator }}"
          values:
            {{- range .values }}
            - "{{ . }}"
            {{- end }}
          {{- if .minValues }}
          minValues: {{ .minValues }}
          {{- end }}
        {{- end }}
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default
      taints:
        - key: nodepool/stable
          effect: NoSchedule
      expireAfter: 720h # 30 * 24h = 720h
      terminationGracePeriod: {{ .Values.global_node_pools.terminationGracePeriod }}
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 30s
    budgets:
      # By default, 10% is set: it applies for any kind of disruption (Empty, Drifted, Underutilized)
      - nodes: 10%
      # The consolidation budgets injected below contain:
      # - either a forbidden rule for Underutilized when the user hasn't configured any disruption period
      # - or some custom forbidden rules which are the complementary of what they configured on core side
      {{- range .Values.stableNodePool.consolidation.budgets }}
      - nodes: {{ .nodes | quote }}
        reasons:
          {{- range .reasons }}
          - "{{ . }}"
          {{- end }}
        duration: {{ .duration }}
        schedule: {{ .schedule | quote }}
      {{- end }}
  {{- if not (and (empty .Values.stableNodePool.limits.maxCpu) (empty .Values.stableNodePool.limits.maxMemory)) }}
  limits:
    cpu: {{ .Values.stableNodePool.limits.maxCpu }}
    memory: {{ .Values.stableNodePool.limits.maxMemory }}
  {{- end }}
  weight: 10
