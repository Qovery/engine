{%- if service.storages | length > 0  %}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ service.name }}
  namespace: {{ namespace }}
  labels:
    envId: {{ environment_short_id }}
    qovery.com/service-id: {{ service.long_id }}
    qovery.com/service-type: container
    qovery.com/environment-id: {{ environment_long_id }}
    qovery.com/project-id: {{ project_long_id }}
  annotations:
    releaseTime: {% raw %}{{ dateInZone "2006-01-02 15:04:05Z" (now) "UTC"| quote }}{% endraw %}
spec:
  replicas: {{ service.min_instances }}
  serviceName: {{ service.name }}
  selector:
    matchLabels:
      qovery.com/service-id: {{ service.long_id }}
  template:
    metadata:
      labels:
        envId: {{ environment_short_id }}
        qovery.com/service-id: {{ service.long_id }}
        qovery.com/service-type: container
        qovery.com/environment-id: {{ environment_long_id }}
        qovery.com/project-id: {{ project_long_id }}
      annotations:
        checksum/config: {% raw %}{{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}{% endraw %}
        checksum/config-mount-files: {% raw %}{{ include (print $.Template.BasePath "/mounted_files_secret.yaml") . | sha256sum }}{% endraw %}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "qovery.com/service-id"
                    operator: In
                    values:
                    - {{ service.long_id }}
              topologyKey: "kubernetes.io/hostname"
      automountServiceAccountToken: false
      {%- if service.advanced_settings.security_service_account_name != "" %}
      serviceAccountName: {{ service.advanced_settings.security_service_account_name }}
      {%- endif %}
      terminationGracePeriodSeconds: {{ service.advanced_settings.deployment_termination_grace_period_seconds }}
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
      {%- if registry.secret_name %}
      imagePullSecrets:
        - name: {{ registry.secret_name }}
      {%- endif %}
      containers:
        - name: {{ service.name }}
          image: "{{ service.image_full }}"
          {%- if service.entrypoint %}
          command:
            - |-
              {{ service.entrypoint }}
          {%- endif %}
          args:
            {%- for arg in service.command_args %}
            - |-
              {{ arg }}
            {%- endfor %}
          env:
            {%- for ev in environment_variables %}
            - name: "{{ ev.key }}"
              valueFrom:
                secretKeyRef:
                  name: {{ service.name }}
                  key: {{ ev.key }}
            {%- endfor %}
          ports:
            {%- for port in service.ports %}
            - containerPort: {{ port.port }}
              name: "p{{ port.port }}"
              protocol: TCP
            {%- endfor %}
          {%- if service.readiness_probe %}
          readinessProbe:
            {%- if service.readiness_probe.type.tcp %}
            tcpSocket:
              port: {{ service.readiness_probe.port }}
              host: {{ service.readiness_probe.type.tcp.host }}
            {%- endif %}
            {%- if service.readiness_probe.type.http %}
            httpGet:
              port: {{ service.readiness_probe.port }}
              path: {{ service.readiness_probe.type.http.path }}
              scheme: {{ service.readiness_probe.type.http.scheme }}
            {%- endif %}
            {%- if service.readiness_probe.type.exec %}
            exec:
              command: {{ service.readiness_probe.type.exec.commands }}
            {%- endif %}
            {%- if service.readiness_probe.type.grpc %}
            grpc:
              port: {{ service.readiness_probe.port }}
              service: {{ service.readiness_probe.type.grpc.service }}
            {%- endif %}
            initialDelaySeconds: {{ service.readiness_probe.initial_delay_seconds }}
            periodSeconds: {{ service.readiness_probe.period_seconds }}
            timeoutSeconds: {{ service.readiness_probe.timeout_seconds }}
            successThreshold: {{ service.readiness_probe.success_threshold }}
            failureThreshold: {{ service.readiness_probe.failure_threshold }}
          {%- endif %}
          {%- if service.liveness_probe %}
          livenessProbe:
            {%- if service.liveness_probe.type.tcp %}
            tcpSocket:
              port: {{ service.liveness_probe.port }}
              host: {{ service.liveness_probe.type.tcp.host }}
            {%- endif %}
            {%- if service.liveness_probe.type.http %}
            httpGet:
              port: {{ service.liveness_probe.port }}
              path: {{ service.liveness_probe.type.http.path }}
              scheme: {{ service.liveness_probe.type.http.scheme }}
            {%- endif %}
            {%- if service.liveness_probe.type.exec %}
            exec:
              command: {{ service.liveness_probe.type.exec.commands }}
            {%- endif %}
            {%- if service.liveness_probe.type.grpc %}
            grpc:
              port: {{ service.liveness_probe.port }}
              service: {{ service.liveness_probe.type.grpc.service }}
            {%- endif %}
            initialDelaySeconds: {{ service.liveness_probe.initial_delay_seconds }}
            periodSeconds: {{ service.liveness_probe.period_seconds }}
            timeoutSeconds: {{ service.liveness_probe.timeout_seconds }}
            successThreshold: {{ service.liveness_probe.success_threshold }}
            failureThreshold: {{ service.liveness_probe.failure_threshold }}
          {%- endif %}
          resources:
            limits:
              cpu: {{ service.cpu_limit_in_mili }}
              memory: {{ service.ram_limit_in_mib }}
            requests:
              cpu: {{ service.cpu_request_in_mili }}
              memory: {{ service.ram_request_in_mib }}
          volumeMounts:
{%- for s in service.storages %}
            - name: {{ s.long_id }}
              mountPath: {{ s.mount_point }}
{%- endfor %}
{%- for mounted_file in mounted_files %}
            - mountPath: "{{ mounted_file.mount_path }}"
              subPath: content
              name: {{ mounted_file.id }}-{{ service.short_id }}
              readOnly: true
{%- endfor %}
      volumes:
{%- for mounted_file in mounted_files %}
        - name: {{ mounted_file.id }}-{{ service.short_id }}
          secret:
            secretName: {{ mounted_file.id }}-{{ service.short_id }}
{%- endfor %}
  volumeClaimTemplates:
{%- for s in service.storages %}
  - metadata:
      name: {{ s.long_id }}
      labels:
        envId: {{ environment_short_id }}
        qovery.com/service-id: {{ service.long_id }}
        qovery.com/service-type: container
        qovery.com/environment-id: {{ environment_long_id }}
        qovery.com/project-id: {{ project_long_id }}
        qovery.com/disk-id: {{ s.long_id }}
        qovery.com/disk-type: {{ s.storage_type }}
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: {{ s.storage_type }}
      resources:
        requests:
          storage: {{ s.size_in_gib }}Gi
{%- endfor %}
{%- endif %}
