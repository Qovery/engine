{%- if grpc_hosts|length >= 1  %}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ sanitized_name }}-grpc
  namespace: {{ namespace }}
  labels:
    qovery.com/service-id: {{ long_id }}
    qovery.com/service-type: "router"
    qovery.com/environment-id: {{ environment_long_id }}
    qovery.com/project-id: {{ project_long_id }}
  annotations:
    kubernetes.io/tls-acme: "true"
    {%- if router_should_declare_domain_to_external_dns == true %}
    external-dns.alpha.kubernetes.io/ttl: "300"
    {%- else %}
    external-dns.alpha.kubernetes.io/exclude: "true" # Make external DNS ignore this ingress https://github.com/kubernetes-sigs/external-dns/issues/1910#issuecomment-976371247
    {%- endif %}
    {%- if client_custom_domains|length > 0 %}
    cert-manager.io/issuer: {{ id }}
    {%- else %}
    cert-manager.io/cluster-issuer: {{ metadata_annotations_cert_manager_cluster_issuer }}
    {%- endif %}
    kubernetes.io/ingress.class: "nginx-qovery"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "{{ advanced_settings.network_ingress_proxy_body_size_mb }}m"
    {%- if sticky_sessions_enabled == true %}
    # https://kubernetes.github.io/ingress-nginx/examples/affinity/cookie/
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/affinity-mode: "persistent"
    nginx.ingress.kubernetes.io/session-cookie-secure: "true"
    nginx.ingress.kubernetes.io/session-cookie-name: "INGRESSCOOKIE_QOVERY"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "85400" # 1 day
    nginx.ingress.kubernetes.io/session-cookie-expires: "85400" # 1 day
    nginx.ingress.kubernetes.io/session-cookie-samesite: "Lax"
    {%- endif %}
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "{{ advanced_settings.network_ingress_proxy_connect_timeout_seconds }}"
    {%- if whitelist_source_range_enabled == true %}
    nginx.ingress.kubernetes.io/whitelist-source-range: "{{ advanced_settings.network_ingress_whitelist_source_range }}"
    {%- endif %}
    {%- if advanced_settings.network_ingress_denylist_source_range %}
    nginx.ingress.kubernetes.io/denylist-source-range: "{{ advanced_settings.network_ingress_denylist_source_range }}"
    {%- endif %}
    {%- if basic_auth_htaccess %}
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: htaccess-{{ sanitized_name }}
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
    {%- endif %}
    # GRPC SPECIFIC
    # https://kubernetes.github.io/ingress-nginx/examples/grpc/
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/server-snippet: |
      grpc_socket_keepalive on;
      keepalive_time "{{ advanced_settings.network_ingress_keepalive_time_seconds }}s";
      keepalive_timeout "{{ advanced_settings.network_ingress_keepalive_timeout_seconds }}s";
      grpc_read_timeout "{{ advanced_settings.network_ingress_grpc_read_timeout_seconds }}s";
      grpc_send_timeout "{{ advanced_settings.network_ingress_grpc_send_timeout_seconds }}s";
      client_body_timeout "{{ advanced_settings.network_ingress_grpc_send_timeout_seconds }}s";
spec:
  tls:
    {%- if client_custom_domains|length > 0 %}
    - secretName: "router-tls-{{ id }}-grpc"
      hosts:
        {%- for domain in client_custom_domains %}
        - "{{ domain.domain }}"
        {%- endfor %}
    {%- endif %}
  # We dont use secret name as we want to rely on default tls certificate from ingress controller
  # which has our wildcard certificate https://cert-manager.io/next-docs/faq/kubed/
  rules:
    {%- for host in grpc_hosts %}
    - host: "{{ host.domain_name }}"
      http:
        paths:
        - path: "/"
          pathType: Prefix
          backend:
            service:
              name: "{{ host.service_name }}"
              port:
                number: {{ host.service_port }}
    {%- endfor %}
{%- endif %}
