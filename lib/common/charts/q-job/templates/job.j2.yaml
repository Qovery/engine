{%- if not service.cronjob_schedule %}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ service.name }}
  labels:
    envId: {{ environment_short_id }}
    qovery.com/service-id: {{ service.long_id }}
    qovery.com/service-type: job
    qovery.com/environment-id: {{ environment_long_id }}
    qovery.com/project-id: {{ project_long_id }}
spec:
  backoffLimit: {{ service.max_nb_restart }}
  activeDeadlineSeconds: {{ service.max_duration_in_sec }}
  {%- if service.advanced_settings.delete_ttl_seconds_after_finished %}
  ttlSecondsAfterFinished: {{ service.advanced_settings.delete_ttl_seconds_after_finished }}
  {%- endif %}
  parallelism: 1
  template:
    metadata:
      labels:
        envId: {{ environment_short_id }}
        qovery.com/service-id: {{ service.long_id }}
        qovery.com/service-type: job
        qovery.com/environment-id: {{ environment_long_id }}
        qovery.com/project-id: {{ project_long_id }}
    spec:
      restartPolicy: Never
      shareProcessNamespace: true
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 60
      securityContext: {}
      {%- if registry %}
      imagePullSecrets:
        - name: {{ registry.secret_name }}
      {%- endif %}
      volumes:
        - name: output
          emptyDir: {}
      containers:
        - name: qovery-wait-container-output
          image: "busybox:1.34.1"
          command: ['sh', '-c', 'while true; do sleep 5; if [ -f /qovery-output/terminate ]; then break; fi; done; sleep 10']
          volumeMounts:
            - name: output
              mountPath: /qovery-output
              #TODO (mzo): mutualize the container job part with cron job
              # Also, if we have 2 types of job (one with output, one without), should be mutualized too
        - name: {{ service.name }}
          image: "{{ service.image_full }}"
          {%- if service.entrypoint %}
          command:
            - |-
              {{ service.entrypoint }}
          {%- endif %}
          args:
            {%- for arg in service.command_args %}
            - |-
              {{ arg }}
            {%- endfor %}
          volumeMounts:
            - name: output
              mountPath: /qovery-output
          env:
            {%- for ev in environment_variables %}
            - name: "{{ ev.key }}"
              valueFrom:
                secretKeyRef:
                  name: {{ service.name }}
                  key: {{ ev.key }}
            {%- endfor %}
          {%- if service.default_port %}
          ports:
            - containerPort: {{ service.default_port }}
              name: "p{{ service.default_port }}"
              protocol: TCP
          {%- if service.advanced_settings.readiness_probe_type != "NONE" %}
          readinessProbe:
            {%- if service.advanced_settings.readiness_probe_type == "TCP" %}
            tcpSocket:
              port: {{ service.default_port }}
            {%- endif %}
            {%- if service.advanced_settings.readiness_probe_type == "HTTP" %}
            httpGet:
              port: {{ service.default_port }}
              path: {{ service.advanced_settings.readiness_probe_http_get_path }}
            {%- endif %}
            initialDelaySeconds: {{ service.advanced_settings.readiness_probe_initial_delay_seconds }}
            periodSeconds: {{ service.advanced_settings.readiness_probe_period_seconds }}
            timeoutSeconds: {{ service.advanced_settings.readiness_probe_timeout_seconds }}
            successThreshold: {{ service.advanced_settings.readiness_probe_success_threshold }}
            failureThreshold: {{ service.advanced_settings.readiness_probe_failure_threshold }}
          {%- endif %}
          {%- if service.advanced_settings.liveness_probe_type != "NONE" %}
          livenessProbe:
            {%- if service.advanced_settings.liveness_probe_type == "TCP" %}
            tcpSocket:
              port: {{ service.default_port }}
            {%- endif %}
            {%- if service.advanced_settings.liveness_probe_type == "HTTP" %}
            httpGet:
              port: {{ service.default_port }}
              path: {{ service.advanced_settings.liveness_probe_http_get_path }}
            {%- endif %}
            initialDelaySeconds: {{ service.advanced_settings.liveness_probe_initial_delay_seconds }}
            periodSeconds: {{ service.advanced_settings.liveness_probe_period_seconds }}
            timeoutSeconds: {{ service.advanced_settings.liveness_probe_timeout_seconds }}
            successThreshold: {{ service.advanced_settings.liveness_probe_success_threshold }}
            failureThreshold: {{ service.advanced_settings.liveness_probe_failure_threshold }}
          {%- endif %}
          {%- endif %}
          resources:
            limits:
              cpu: {{ service.cpu_limit_in_milli }}
              memory: {{ service.ram_limit_in_mib }}
            requests:
              cpu: {{ service.cpu_request_in_milli }}
              memory: {{ service.ram_request_in_mib }}
{%- endif %}