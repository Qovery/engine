{%- if not service.cronjob_schedule %}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ service.name }}
  labels:
    envId: {{ environment_short_id }}
    qovery.com/service-id: {{ service.long_id }}
    qovery.com/service-type: job
    qovery.com/environment-id: {{ environment_long_id }}
    qovery.com/project-id: {{ project_long_id }}
  annotations:
    qovery.com/service-version: {{ service.version }}
spec:
  backoffLimit: {{ service.max_nb_restart }}
  activeDeadlineSeconds: {{ service.max_duration_in_sec }}
  {%- if service.advanced_settings.delete_ttl_seconds_after_finished %}
  ttlSecondsAfterFinished: {{ service.advanced_settings.delete_ttl_seconds_after_finished }}
  {%- endif %}
  parallelism: 1
  template:
    metadata:
      labels:
        envId: {{ environment_short_id }}
        qovery.com/service-id: {{ service.long_id }}
        qovery.com/service-type: job
        qovery.com/environment-id: {{ environment_long_id }}
        qovery.com/project-id: {{ project_long_id }}
      annotations:
        qovery.com/service-version: {{ service.version }}
    spec:
      affinity:
        {%- if service.advanced_settings.deployment_affinity_node_required %}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
        {%- for key, value in service.advanced_settings.deployment_affinity_node_required %}
        - matchExpressions:
            - key: "{{ key }}"
              operator: In
              values:
                - {{ value }}
        {%- endfor %}
        {%- endif %}
      restartPolicy: Never
      shareProcessNamespace: true
      automountServiceAccountToken: false
      {%- if service.advanced_settings.security_service_account_name != "" %}
      serviceAccountName: {{ service.advanced_settings.security_service_account_name }}
      {%- endif %}
      terminationGracePeriodSeconds: {{ service.advanced_settings.deployment_termination_grace_period_seconds }}
      {%- if registry %}
      imagePullSecrets:
        - name: {{ registry.secret_name }}
      {%- endif %}
      volumes:
        - name: output
          emptyDir: {}
        {%- for mounted_file in mounted_files %}
        - name: {{ mounted_file.id }}-{{ service.short_id }}
          secret:
            secretName: {{ mounted_file.id }}-{{ service.short_id }}
        {%- endfor %}
      containers:
        - name: qovery-wait-container-output
          image: "busybox:1.34.1"
          command: ['sh', '-c', 'while true; do sleep 5; if [ -f /qovery-output/terminate ]; then break; fi; done; sleep 10']
          volumeMounts:
            - name: output
              mountPath: /qovery-output
              #TODO (mzo): mutualize the container job part with cron job
              # Also, if we have 2 types of job (one with output, one without), should be mutualized too
        - name: {{ service.name }}
          image: "{{ service.image_full }}"
          {%- if service.entrypoint %}
          command:
            - |-
              {{ service.entrypoint }}
          {%- endif %}
          args:
            {%- for arg in service.command_args %}
            - |-
              {{ arg }}
            {%- endfor %}
          volumeMounts:
            - name: output
              mountPath: /qovery-output
            {%- for mounted_file in mounted_files %}
            - mountPath: "{{ mounted_file.mount_path }}"
              subPath: content
              name: {{ mounted_file.id }}-{{ service.short_id }}
              readOnly: true
            {%- endfor %}
          env:
            {%- for ev in environment_variables %}
            - name: "{{ ev.key }}"
              valueFrom:
                secretKeyRef:
                  name: {{ service.name }}
                  key: {{ ev.key }}
            {%- endfor %}
          {%- if service.default_port %}
          ports:
            - containerPort: {{ service.default_port }}
              name: "p{{ service.default_port }}"
              protocol: TCP
          {%- endif %}
          {%- if service.readiness_probe %}
          readinessProbe:
            {%- if service.readiness_probe.type.tcp %}
            tcpSocket:
              port: {{ service.readiness_probe.port }}
              host: {{ service.readiness_probe.type.tcp.host }}
            {%- endif %}
            {%- if service.readiness_probe.type.http %}
            httpGet:
              port: {{ service.readiness_probe.port }}
              path: {{ service.readiness_probe.type.http.path }}
              scheme: {{ service.readiness_probe.type.http.scheme }}
            {%- endif %}
            {%- if service.readiness_probe.type.exec %}
            exec:
              command: {{ service.readiness_probe.type.exec.commands }}
            {%- endif %}
            {%- if service.readiness_probe.type.grpc %}
            grpc:
              port: {{ service.readiness_probe.port }}
              service: {{ service.readiness_probe.type.grpc.service }}
            {%- endif %}
            initialDelaySeconds: {{ service.readiness_probe.initial_delay_seconds }}
            periodSeconds: {{ service.readiness_probe.period_seconds }}
            timeoutSeconds: {{ service.readiness_probe.timeout_seconds }}
            successThreshold: {{ service.readiness_probe.success_threshold }}
            failureThreshold: {{ service.readiness_probe.failure_threshold }}
          {%- endif %}
          {%- if service.liveness_probe %}
          livenessProbe:
            {%- if service.liveness_probe.type.tcp %}
            tcpSocket:
              port: {{ service.liveness_probe.port }}
              host: {{ service.liveness_probe.type.tcp.host }}
            {%- endif %}
            {%- if service.liveness_probe.type.http %}
            httpGet:
              port: {{ service.liveness_probe.port }}
              path: {{ service.liveness_probe.type.http.path }}
              scheme: {{ service.liveness_probe.type.http.scheme }}
            {%- endif %}
            {%- if service.liveness_probe.type.exec %}
            exec:
              command: {{ service.liveness_probe.type.exec.commands }}
            {%- endif %}
            {%- if service.liveness_probe.type.grpc %}
            grpc:
              port: {{ service.liveness_probe.port }}
              service: {{ service.liveness_probe.type.grpc.service }}
            {%- endif %}
            initialDelaySeconds: {{ service.liveness_probe.initial_delay_seconds }}
            periodSeconds: {{ service.liveness_probe.period_seconds }}
            timeoutSeconds: {{ service.liveness_probe.timeout_seconds }}
            successThreshold: {{ service.liveness_probe.success_threshold }}
            failureThreshold: {{ service.liveness_probe.failure_threshold }}
          {%- endif %}
          securityContext:
            readOnlyRootFilesystem: {{ service.advanced_settings.security_read_only_root_filesystem }}
          resources:
            limits:
              cpu: {{ service.cpu_limit_in_milli }}
              memory: {{ service.ram_limit_in_mib }}
            requests:
              cpu: {{ service.cpu_request_in_milli }}
              memory: {{ service.ram_request_in_mib }}
{%- endif %}