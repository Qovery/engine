{{- $kubefullname := include "qovery-engine.fullname" . }}
apiVersion: apps/v1
{{ if and .Values.buildContainer.enabled .Values.volumes.useNetworkDisks }}
kind: StatefulSet
{{ else }}
kind: Deployment
{{ end }}
metadata:
  name: qovery-engine
  labels:
    {{- include "qovery-engine.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.autoscaler.minReplicas }}
  {{ if and .Values.buildContainer.enabled .Values.volumes.useNetworkDisks }}
  serviceName: qovery-engine
  {{ end }}
  selector:
    matchLabels:
      {{- include "qovery-engine.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      labels:
        {{- include "qovery-engine.selectorLabels" . | nindent 8 }}
    spec:
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{ if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "qovery-engine.serviceAccountName" . }}
      {{ end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: qovery-engine
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
          env:
            - name: ENGINE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: BUILDER_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: IGNORE_DOCKER_HOST_CHECK
              value: "{{ if .Values.buildContainer.enabled }}false{{ else }}true{{ end }}"
            {{ range $key, $value := .Values.environmentVariables -}}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: {{ $kubefullname }}
                  key: {{ $key }}
            {{ end }}
          livenessProbe:
            httpGet:
              path: /metrics
              port: {{ .Values.metrics.port }}
          resources:
            {{- toYaml .Values.engineResources | nindent 12 }}
{{ if .Values.buildContainer.enabled }}
          volumeMounts:
            - name: qovery-workspace
              mountPath: {{ .Values.volumes.qoveryWorkspace.path }}
        - name: docker-build
          image: "{{ .Values.buildContainer.image }}:{{ .Values.buildContainer.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
          env:
            - name: DOCKER_TLS_CERTDIR
              value: ""
            {{ range $key, $value := .Values.environmentVariables -}}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: qovery-engine
                  key: {{ $key }}
            {{ end }}
          livenessProbe:
            exec:
              command: [ "docker", "info" ]
            initialDelaySeconds: 15
            periodSeconds: 30
          lifecycle:
            preStop:
              exec:
                # Check if prometheus is shutdown before shutting down docker builder. DO NOT REMOVE.
                # If we don't check it, processes like docker are hard kill and it generates issues.
                command: ["/bin/sh", "-c", "echo 'Stopping docker container...' > /proc/1/fd/1 ; while nc -z localhost 8080; do sleep 1; done; echo 'Stopping docker container now...' > /proc/1/fd/1"]
          volumeMounts:
            - name: qovery-workspace
              mountPath: {{ .Values.volumes.qoveryWorkspace.path }}
  {{ if .Values.volumes.useNetworkDisks }}
  volumeClaimTemplates:
  - metadata:
      name: qovery-workspace
      labels:
        {{- include "qovery-engine.labels" . | nindent 8 }}
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: {{ .Values.volumes.storageClassName }}
      resources:
        requests:
          storage: {{ .Values.volumes.qoveryWorkspace.size }}
  {{ else }}
      volumes:
        - name: qovery-workspace
          emptyDir: {}
  {{ end }}
{{ end }}
